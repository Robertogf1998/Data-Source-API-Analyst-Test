# -*- coding: utf-8 -*-
"""Github_API_Colab_Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOzZtXGmbS1Ovcjcvd-vSmuYWPm4jZcr
"""

GITHUB_TOKEN = "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"

HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "X-GitHub-Api-Version": "2022-11-28"
}

def validar_token():
    response = requests.get("https://api.github.com/user", headers=HEADERS)
    if response.status_code == 200:
        print("‚úÖ Token v√°lido. Usuario:", response.json()["login"])
    else:
        print("‚ùå Token inv√°lido:", response.status_code, response.text)

validar_token()

def buscar_repositorios(query, max_pages=2, per_page=5):
    for page in range(1, max_pages + 1):
        print(f"\nüîé P√°gina {page}")
        url = f"https://api.github.com/search/repositories?q={query}&per_page={per_page}&page={page}"
        response = requests.get(url, headers=HEADERS)

        if response.status_code == 200:
            data = response.json()
            for repo in data.get("items", []):
                nombre = repo['full_name']
                estrellas = repo['stargazers_count']
                url_repo = repo['html_url']
                print(f"{nombre} - ‚≠ê {estrellas} - {url_repo}")
        else:
            print(f"‚ùå Error {response.status_code}: {response.text}")
            break

buscar_repositorios("machine learning", max_pages=2)

def obtener_commits(owner, repo, per_page=5):
    url = f"https://api.github.com/repos/{owner}/{repo}/commits?per_page={per_page}"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        commits = response.json()
        for commit in commits:
            autor = commit['commit']['author']['name']
            mensaje = commit['commit']['message']
            fecha = commit['commit']['author']['date']
            print(f"üìù {fecha} - {autor}: {mensaje}")
    else:
        print(f"‚ùå Error {response.status_code}: {response.text}")

obtener_commits("pandas-dev", "pandas")

def obtener_contenido(owner, repo, path=""):
    url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    response = requests.get(url, headers=HEADERS)

    if response.status_code == 200:
        archivos = response.json()
        for item in archivos:
            nombre = item['name']
            tipo = item['type']
            print(f"{tipo.upper()}: {nombre}")
    else:
        print(f"‚ùå Error {response.status_code}: {response.text}")

obtener_contenido("pandas-dev", "pandas")